{
  "name": "node-sumo",
  "version": "0.0.1",
  "description": "library for the Parrot Jumping Sumo",
  "main": "lib/index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/forgeByAcision/node-sumo.git"
  },
  "keywords": [
    "parrot",
    "jumping",
    "sumo",
    "drone"
  ],
  "author": {
    "name": "Peter Dunkley",
    "email": "peter.dunkley@acision.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/forgeByAcision/node-sumo/issues"
  },
  "homepage": "https://github.com/forgeByAcision/node-sumo",
  "devDependencies": {
    "grunt": "^0.4.5",
    "grunt-eslint": "^13.0.0"
  },
  "dependencies": {
    "through": "^2.3.7"
  },
  "readme": "# node-sumo\n\nControl your Parrot Jumping Sumo drone using JavaScript!\n\nThis module allows you to control and receive video data from the [Parrot Jumping Sumo](http://www.parrot.com/products/jumping-sumo/) WiFi controlled drone.\n\nThe implementation is heavily based on the [node-bebop](https://github.com/hybridgroup/node-bebop) from [@hybridgroup](https://github.com/hybridgroup). The Bebop and Jumping Sumo share the same underlying connection and management protocol with the following differences:\n* Jumping Sumo transmits MJPEG video instead of H.264 (no iframes to worry about)\n* The commands to drive the Jumping Sumo are completely different from those to fly the Bebop\n* The events from the Jumping Sumo are (mostly) different from those from the Bebop\n\n## How to Install\n\nTo get started, install the npm module:\n\n    $ npm install git+https://github.com/forgeByAcision/node-sumo\n\n\n## How to Use\n\nThis simple example postures the drone and moves it forwards for 1 second:\n\n```javascript\nvar sumo = require('node-sumo');\n\nvar drone = sumo.createClient();\n\ndrone.connect(function() {\n  drone.postureJumper();\n  drone.forward(50);\n\n  setTimeout(function() {\n    drone.stop();\n  }, 1000);\n});\n\n```\n### API\n\n#### createClient()\n\nReturns a `new Sumo`\n\n#### getVideoStream()\n\nReturns a stream of MJPEG frames through the `data` event.\n\n#### connect(callback)\n\nConnects to the drone and executes the callback when the drone is ready to drive. Also fires the `ready` event when teh drone is ready.\n\n#### forward(speed)\n\nMove the drone forward at the specified speed (between 0 and 127).\n\n#### backward(speed)\n\nMove the drone backward at the specified speed (between 0 and 127).\n\n#### right(speed)\n\nTurn the drone right at the specified speed (between 0 and 127).\n\n#### left(speed)\n\nTurn the drone right at the specified speed (between 0 and 127).\n\n#### stop()\n\nTell the drone to stop moving.\n\n#### animationsLongJump()\n\nPerform a long jump. The drone needs to be in the jumper or kicker posture to use this API.\n\nWhen in kicker posture the first call will retract the drone's jump mechanism and the second will release it. You need to wait for the drone's jump mechanism to be fully retracted before releasing it. You can move the drone after the jump mechanism has been pulled in (for example, reversing up to a wall or object to kick) and before you release it.\n\n#### animationsHighJump()\n\nPerform a high jump. The drone needs to be in the jumper posture to use this API.\n\n#### animationsStop()\n\nStop the pre-programmed animation.\n\n#### animationsSpin()\n\nPerform a spin.\n\n#### animationsTap()\n\nTap the drone's jump mechanism.\n\n#### animationsSlowShake()\n\nShake the drone from side-to-side.\n\n#### animationsMetronome()\n\nPerform the metronome animation.\n\n#### animationsOndulation()\n\nPerform the ondulation animation.\n\n#### animationsSpinJump()\n\nSpin and then jump the drone.\n\n#### animationsSpinToPosture()\n\nSpin and then change posture.\n\n#### animationsSpiral()\n\nMake the drone drive in a spiral.\n\n#### animationsSlalom()\n\nMake the drone drive in a slalom pattern.\n\n#### postureStanding()\n\nMove the drone into the standing (on head) posture.\n\n#### postureJumper()\n\nMove the drone into the jumper posture. The drone's jump mechanism is used to propel the drone into the air.\n\n#### postureKicker()\n\nMove the drone into the kicker posture. The drone's jump mechanism is used to kick objects behind the drone.\n\n### Events\n\n#### getVideoStream(): data\n\nEmits the MJPEG video stream.\n\n#### ready\n\nEmitted when the application has connected to the drone and it is ready for commands.\n\n#### battery\n\nEmits the battery level percentage.\n\n#### postureStanding\n\nEmitted when the drone changes to the standing posture. The event may be emitted slightly before the movement is complete so you may want to wait a short time before sending the drone futher commands.\n\n#### postureJumper\n\nEmitted when the drone changes to the jumper posture. The event may be emitted slightly before the movement is complete so you may want to wait a short time before sending the drone futher commands.\n\n#### postureKicker\n\nEmitted when the drone changes to the kicker posture. The event may be emitted slightly before the movement is complete so you may want to wait a short time before sending the drone futher commands.\n\n#### postureStuck\n\nEmitted when the drone is stuck.\n\n#### postureUnknown\n\nEmitted when the drone is in an unknown position.\n\n#### batteryCritical\n\nEmitted when the battery is at a critically low level.\n\n#### batteryLow\n\nEmitted when the battery is at a low level.\n\n#### jumpLoadUnknown\n\nEmitted when the load state of the jump mechanism is unknown.\n\n#### jumpLoadUnloaded\n\nEmitted when the jump mechanism is unloaded (for example, after a jump or kick). The event may be emitted slightly before the movement is complete so you may want to wait a short time before sending the drone futher commands.\n\n#### jumpLoadLoaded\n\nEmitted when the jump mechanism is retracted (for example, after a long jump while in the kicker posture). The event may be emitted slightly before the movement is complete so you may want to wait a short time before sending the drone futher commands.\n\n#### jumpLoadBusy\n\nEmitted when the jump mechanism is busy (for example, if you tell the drone to jump while a jump is already in progress).\n\n#### jumpLoadLowBatteryUnloaded\n\nEmitted when the jump mechanism is unloaded and the drone cannot perform the jump requested because the battery is low.\n\n#### jumpLoadLowBatteryLoaded\n\nEmitted when the jump mechanism is unloaded and the drone cannot perform the jump requested because the battery is low.\n\n#### jumpMotorOK\n\nEmitted when the jump motor is OK (it may have previously been blocked or overheated).\n\n#### jumpMotorErrorBlocked\n\nEmitted when the jump motor is blocked.\n\n#### jumpMotorErrorOverheated\n\nEmitted when the jump motor has overheated.\n\n#### video\n\nEmits single MJPEG video frame\n\n## Release History\n\n0.0.1 Initial release\n\n## License\n\nCopyright (c) 2015 Acision. Licensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "node-sumo@0.0.1",
  "dist": {
    "shasum": "2e6b2a0e484b27cdb2c84305adae25257fd416b3"
  },
  "_resolved": "git+https://github.com/forgeByAcision/node-sumo#501f072e56ca5d68345f6751c2f60897b63947d7",
  "_from": "git+https://github.com/forgeByAcision/node-sumo"
}
